version: '3.9'
services:
  frontend:
    build:
      context: ./frontend
    ports:
      - "127.0.0.1:5173:5173"
    depends_on:
      - backend
    networks:
      - frontend_net
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.5"
        reservations:
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  backend:
    build:
      context: ./backend
    ports:
      - "127.0.0.1:8888:8888"
    depends_on:
      - database
      - cache
    networks:
      - backend_net
      - data_net
    secrets:
      - db_user
      - db_password
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "1.0"
        reservations:
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  database:
    image: mysql:8.0
    security_opt:
    - seccomp:unconfined
    environment:
      MYSQL_ROOT_PASSWORD: XXXXXXXXXXXXXXXXXXX
      MYSQL_DATABASE: clothes_store
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_SSL_CA: /etc/mysql/certs/mysql-ca.pem
      MYSQL_SSL_CERT: /etc/mysql/certs/mysql-server.crt
      MYSQL_SSL_KEY: /etc/mysql/certs/mysql-server.key
      TZ: "Europe/Kiev"
    volumes:
      - db_data:/var/lib/mysql
      - ./database/certs:/etc/mysql/certs
      - ./database/clothes_store.sql:/docker-entrypoint-initdb.d/clothes_store.sql
    ports:
      - "127.0.0.1:3307:3306"
    networks:
      - data_net
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "2.0"
        reservations:
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  cache:
    image: redis:latest
    ports:
      - "127.0.0.1:6380:6379"
    networks:
      - data_net
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "1.0"
        reservations:
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  proxy:
    build:
      context: ./proxy
    ports:
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - backend_net
      - frontend_net
      - monitoring_net
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.5"
        reservations:
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  monitoring:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    command:
      - "--web.external-url=/prometheus/"
    networks:
      - monitoring_net
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "1.0"
        reservations:
          memory: 256M

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=Monitoring_grafana
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_AUTH_DISABLE_SIGNUP=true
      - GF_SERVER_ROOT_URL=https://192.168.0.113/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_SERVER_PROTOCOL=https
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - monitoring_net
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "1.0"
        reservations:
          memory: 256M

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    ports:
      - "127.0.0.1:8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /sys:/sys
      - /var/lib/docker:/var/lib/docker
    networks:
      - monitoring_net
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.5"
        reservations:
          memory: 128M
          
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    ports:
      - "127.0.0.1:9100:9100"
    networks:
      - monitoring_net

volumes:
  db_data:
  grafana-data:

networks:
  frontend_net:
    driver: bridge
  backend_net:
    driver: bridge
  data_net:
    driver: bridge
  monitoring_net:
    driver: bridge


secrets:
  db_user:
    file: ./secrets/db_user.txt
  db_password:
    file: ./secrets/db_password.txt
